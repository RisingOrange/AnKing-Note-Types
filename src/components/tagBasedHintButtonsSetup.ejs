<script>
    (function () {
        function tagToResourceTitleAndSlug(tag, resourceSlug) {
            try {
                // Extract step number
                const stepMatch = tag.match(/#AK_Step(\d+)_v12::/i);
                if (!stepMatch) return null;
                const step = parseInt(stepMatch[1]);

                // Process path
                let path = tag.replace(/.+_v12::#.+?::/i, '');
                let pathParts = path.split('::');
                pathParts = pathParts.map(part => part.toLowerCase());

                // Remove path parts after first path part starting with "*"
                for (let index = 0; index < pathParts.length; index++) {
                    if (pathParts[index].startsWith("*")) {
                        pathParts = pathParts.slice(0, index);
                        break;
                    }
                }

                // Remove the last part if it is "extra"
                if (pathParts[pathParts.length - 1] === "extra") {
                    pathParts = pathParts.slice(0, -1);
                }
                
                // Create slug
                const contentNumbers = pathParts
                    .map(part => part.match(/\d+/))
                    .map(matchArray => parseInt(matchArray[0], 10));

                const slug = `step${step}-${resourceSlug}-${contentNumbers.join('-')}`;

                // Create title
                const title = pathParts[pathParts.length - 1]
                    .replace(/^\d+_/g, '')
                    .replace(/_/g, ' ')
                    .split(' ')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');

                const titleWithStep = `Step ${step} - ${title}`;

                return { "title": titleWithStep, slug };
            } catch (error) {
                return null;
            }
        }

        function createResourceUrl(slug) {
            return `https://app.ankihub.net/integrations/mcgraw-hill/preview/${slug}`;
        }

        function getResourceTags(tags, resourceTypeTagPart) {
            const searchPattern = `v12::${resourceTypeTagPart}`.toLowerCase();
            return tags.filter(tag => tag.toLowerCase().includes(searchPattern));
        }

        function setupTagBasedHintButton(hintButton) {
            const resourceTags = getResourceTags(tags, hintButton.dataset.resourceTypeTagPart);
            if (!resourceTags || resourceTags.length == 0) {
                return;
            }

            const button = document.getElementById(hintButton.id);
            const hintsDiv = button.querySelector('.hints');

            // Create links from the resource tags
            const resourceLinks = resourceTags
                .map(tag => {
                    const resource = tagToResourceTitleAndSlug(tag, hintButton.dataset.resourceSlug);
                    if (resource) {
                        const url = createResourceUrl(resource.slug);
                        return `<a href="${url}" target="_blank">${hintButton.dataset.linkPrefix} ${resource.title}</a>`;
                    }
                    return null;
                })
                .filter(link => link !== null);

            // Remove duplicates
            const uniqueResourceLinks = [...new Set(resourceLinks)];

            // Sort by title
            uniqueResourceLinks.sort((a, b) => a.localeCompare(b));

            // Update button visibility and content
            if (uniqueResourceLinks.length > 0) {
                hintsDiv.innerHTML = uniqueResourceLinks.join('<br>');
                button.classList.remove('hidden');
            }
        }

        const tags = `{{Tags}}`.split(" ");
        const tagBasedHintButtons = document.querySelectorAll(".hintBtn.tagBasedHintBtn");
        for (let i = 0; i < tagBasedHintButtons.length; i++) {
            setupTagBasedHintButton(tagBasedHintButtons[i])
        }
    })()
</script>